{
  "cells":[
    {
      "raw":"\ndf = pd.read_csv(\"./datasets/spscientist__student-performance-in-exams__StudentsPerformance.csv\")\n",
      "modified":"df = pd.read_csv(\n    './datasets/spscientist__student-performance-in-exams__StudentsPerformance.csv'\n    )\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":1.744414
    },
    {
      "raw":"\npassmark = 40\n",
      "modified":"passmark = 40\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":0.168333
    },
    {
      "raw":"\ndf['Math_PassStatus'] = np.where(df['math score']<passmark, 'F', 'P')\n",
      "modified":"df['Math_PassStatus'] = np.where(df['math score'] < passmark, 'F', 'P')\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":0.591688
    },
    {
      "raw":"\ndf['Reading_PassStatus'] = np.where(df['reading score']<passmark, 'F', 'P')\n",
      "modified":"df['Reading_PassStatus'] = np.where(df['reading score'] < passmark, 'F', 'P')\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":0.425366
    },
    {
      "raw":"\ndf['Writing_PassStatus'] = np.where(df['writing score']<passmark, 'F', 'P')\n",
      "modified":"df['Writing_PassStatus'] = np.where(df['writing score'] < passmark, 'F', 'P')\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":0.419626
    },
    {
      "raw":"\nour = df.apply(lambda x : 'F' if x['Math_PassStatus'] == 'F' or \n                x['Reading_PassStatus'] == 'F' or x['Writing_PassStatus'] == 'F' else 'P', axis =1).str.replace('F', 'B')\n",
      "modified":"def _REWR_apply_vec(df):\n    if type(df) == pd.DataFrame:\n        return pd.Series(np.select([(df['Math_PassStatus'] == 'F') | (df[\n            'Reading_PassStatus'] == 'F') | (df['Writing_PassStatus'] ==\n            'F')], ['F'], default='P'))\n    else:\n        return df.apply(lambda x: 'F' if x['Math_PassStatus'] == 'F' or x[\n            'Reading_PassStatus'] == 'F' or x['Writing_PassStatus'] == 'F' else\n            'P', axis=1)\nour = _REWR_apply_vec(df).str.replace('F', 'B')\n",
      "patts-hit":{
        "ApplyVectorizedLambda":1
      },
      "rewritten-exec-time":1.348079
    },
    {
      "raw":"\ndefa = df.apply(lambda x : 'F' if x['Math_PassStatus'] == 'F' or \n                  x['Reading_PassStatus'] == 'F' or x['Writing_PassStatus'] == 'F' else 'P', axis =1).str.replace('F', 'B')\n",
      "modified":"def _REWR_apply_vec(df):\n    if type(df) == pd.DataFrame:\n        return pd.Series(np.select([(df['Math_PassStatus'] == 'F') | (df[\n            'Reading_PassStatus'] == 'F') | (df['Writing_PassStatus'] ==\n            'F')], ['F'], default='P'))\n    else:\n        return df.apply(lambda x: 'F' if x['Math_PassStatus'] == 'F' or x[\n            'Reading_PassStatus'] == 'F' or x['Writing_PassStatus'] == 'F' else\n            'P', axis=1)\ndefa = _REWR_apply_vec(df).str.replace('F', 'B')\n",
      "patts-hit":{
        "ApplyVectorizedLambda":1
      },
      "rewritten-exec-time":1.180277
    },
    {
      "raw":"\nassert (our == defa).all()\n",
      "modified":"assert (our == defa).all()\n",
      "patts-hit":{
        
      },
      "rewritten-exec-time":0.281623
    }
  ]
}