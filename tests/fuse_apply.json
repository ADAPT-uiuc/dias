{
  "cells":[
    {
      "raw": "\nmd = pd.read_csv('./datasets/rounakbanik__movie-recommender-systems__movies_metadata.csv', low_memory=False)\n",
      "modified": "md = pd.read_csv(\n    './datasets/rounakbanik__movie-recommender-systems__movies_metadata.csv',\n    low_memory=False)\n",
      "patts-hit": {},
      "rewritten-exec-time": 25.644054
    },
    {
      "raw": "\n# Make copy for testing\nmd['copy'] = md['genres'].copy()\n",
      "modified": "md['copy'] = md['genres'].copy()\n",
      "patts-hit": {},
      "rewritten-exec-time": 0.563597
    },
    {
      "raw": "\nmd['genres'] = md['genres'].fillna('[]').apply(literal_eval).apply(lambda x: [i['name'] for i in x] if isinstance(x, list) else []).head()\n",
      "modified": "def fused_apply(ser):\n    if type(ser) == pd.Series:\n        res = []\n        ls = ser.tolist()\n        for it in ls:\n            left = literal_eval(it)\n            right = [i['name'] for i in left] if isinstance(left, list) else []\n            res.append(right)\n        return pd.Series(res)\n    else:\n        return ser.apply(literal_eval).apply(lambda x: [i['name'] for i in\n            left] if isinstance(left, list) else [])\nmd['genres'] = fused_apply(md['genres'].fillna('[]')).head()\n",
      "patts-hit": {
        "FuseApply": 1
      },
      "rewritten-exec-time": 57.44789
    },
    {
      "raw": "\nassert (md['defa'].dropna() == md['genres'].dropna()).all()\n",
      "modified": "assert (md['defa'].dropna() == md['genres'].dropna()).all()\n",
      "patts-hit": {},
      "rewritten-exec-time": 0.603498
    }
    
  ]
}